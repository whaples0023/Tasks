library (swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9.3.14)
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
z <- 555
c(z, 555, z)
z * 2 + 100
z - 1 ^2
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
(z * 2 + 100)
z * 2 + 1000
my_div
library(swirl)
ls()
rm(list=ls()
rm(list=ls())
rm(list=ls())
swirl()
swirl()
library(swirl)
swirl()
info()
main()
main()
swirl()
Sys.Date()
c(2, 4, 5)
mean(c(2, 4, 5))
boring_function <- function(x)
boring_function <- function(x)
{}
boring_function <- function(x)
boring_function <- function(x)
{sum(x)/length(x)}
submit()
submit()
boring_function <- function(x) {sum(x)/length(x)
x
}
submit()
submit()
submit()
boring_function <- function(x) {
x
}
boring_function <- function(x) {
x
}
x
submit()
submit()
boring_function(x)
boring_function <- function(x)
x
submit()
boring_function('My first function!')
boring_function
my_mean <- function(my_vector)
sum(x)/length(x)
submit()
my_mean <- function(my_vector)
sum(my_vector)/length(my_vector)
my_mean <- function(my_vector)
sum(my_vector)/length(my_vector)
submit()
my_mean <- function(my_vector){}
my_mean <- function(my_vector){
sum(my_vector)/length(my_vector)
}
submit()
skip()
my_mean(c(4, 5, 10))
remainder <- function(num,divisor){
7/4
}
submit()
remainder <- function(num, by 1){
7/4
}
remainder <- function(num, divisor){
7 %% 4
}
submit()
remainder <- function(num, divisor){
num %% 2
}
submit()
remainder <- function(num, by 2){
number by 2
}
remainder <- function(num, by = 2){
number by 2
}
remainder <- function(num, by = 2){
number %% 2
}
submit()
remainder <- function(num, by = 2){
num %% 2
}
submit()
remainder <- function(num, 2){
num %% 2
}
submit()
remainder <- function(num, divisor) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
submit()
submit()
remainder <- function(num, divsor){
num %% 2
}
submit()
remainder <- function(num, 2){
num %% by
}
remainder <- function(num, 2){
num %% 2
}
remainder <- function(num, 2){
num %% 2
}
remainder <- function(num, divisor){
7 %% 2
}
submit()
remainder <- function(num, 2){
num %% divisor
}
remainder <- function(num, divisor = 2){
num %% 2
}
submit()
remainder <- function(num, divisor = 2){
4 %% 2
}
submit()
remainder <- function(num, divisor = 2){
2 %% 2
}
submit()
remainder <- function(num, divisor = 2){
num %% 2
}
submit()
skip()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder (4, div = 2)
args(remainder)
evaluate <- function(func, dat){
evaluate(sum(c(5, 4, 10))
}
}
}
(5, 4, 10))
evaluate <- function(func, dat){
(5, 4, 10))
}
}
skip()
evaluate <- function(func, dat){
(sd, c(1.4, 3.6, 7.9, 8.8))
}
submit()
evaluate <- function(func, dat){
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
}
evaluate <- function(func, dat){
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
}
submit()
evaluate <- function(func, dat){
evaluate(sum, c(1.4, 3.6, 7.9, 8.8))
}
submit()
evaluate <- function(func, dat){
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
}
submit()
skip()
evaluate(function(x){x+1}, 6)
evaluate(c(8, 4, 0))
evaluate(function(x)c(8, 4, 0)
skip()
skip()
skip()
?paste
paste()
paste("Programming, is, fun!")
paste("Programming", "is", "fun!")
telegram <- function("Good", "morning"){
"START Good morning STOP"
}
telegram <- function("Good", "morning"){
"START Good morning STOP"
}
skip()
paste("Simon says", ..., "Hello")
paste("Simon says", ...)
telegram <- function(...){
paste("Simon says", ..., "hi")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", "WV", "today where", "college", "students took to the streets in protest of the new", "snack machine", "being installed on campus.")
}
submit()
mad_libs <- function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", "WV", "today where", "college", "students took to the streets in protest of the new", "machine", "being installed on campus.")
}
submit()
skip()
noun <- args[["machine"]]
noun <- args[["rail"]]
noun <- args[["railing"]]
noun <- args[["garage"]]
skip()
"%p%" <- function(){ "Good" %p% "job!"
}
"Good" %p% "job!"
"%p%" <- function(){
"Good" %p% "job!"
}
"Good" %p% "job!"
"%p%" <- function(){
"Good" %p% "job!"
}
"Good" %p% "job!"
"%p%" <- function(){
"Good" %p% "job!"
}
submit()
"%p%" <- function(){
'Hello' %p% 'student!'
}
submit()
"%p%" <- function(){
'Hello' %p% 'student!'
}
submit()
'Hello' %p% 'student!'
"%p%" <- function(){
'Hello' %p% 'student!'
}
"%p%" <- function(){
"Hello" %p% "student!"
}
"%p%" <- function(){
"Hello" %p% "student!"
}
submit()
skip()
"%p%" <- function(left, right){ 'I', 'love', 'R!'
paste(left, right)
}
paste("I", "love", "R!")
"%p%" <- function(left, right){
paste("I" %p% "love" %p% "R!")
}
skip()
data(cars)
help(cars)
Run head(cars)
head(cars)
plot(cars)
help(plot)
plot(x and y)
plot(x,y)
plot(x = car$speed, y = cars$dist)
skip()
plot(x = cars$dist, y = cars$speed)
skip()
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, xlab = "Speed", y = cars$dist, ylab = "Stopping Distance")
main(My Plot)
skip()
plot(cars, main = My Plot Subtitle)
plot(cars, submain = My Plot)
skip()
plot(cars, col = 2)
plot(cars, xlim = c(10, 15)
plot(cars, xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
?points?
plot(cars, pch =2)
skip()
data(mtcars)
help(boxplot)
boxplot(mpg ~ cyl and data = mtcars)
skip()
hist(mtcars$mpg)
setwd('beren_new.csv')
setwd('C:\\Users\\Mallori\\OneDrive\\Desktop\\Evolution\\Tasks\\Task_02')
# Read this file off the internet
Data <- read.csv('http://jonsmitchell.com/data/beren.csv', stringsAsFactors=F)
write.csv(Data, 'rawdata.csv', quote=F)
length(Data)
nrow(Data)
ncol(Data)
colnames(Data)
head(Data)
Data[1,]
Data[2,]
Data[1:3,]
Data[1:3,4]
Data[1:5, 1:3]
Feeds <- which(Data[,9] =='bottle')
berenMilk <- Data[Feeds,]
head(berenMilk)
#There are six rows now and each row represents the duration of drinking milk.
Feeds <- which(Data[,'event'] == 'bottle')
Feeds <- which(Data$event == 'bottle')
#These are all the same ways to finding the bottle events because the commands are the same. The first one takes you step by step in accessing the bottle events, while the second one chooses to access it throught the event, and the third uses the dollar sign which is just another command to access.
dayID <- apply(Data, 1, function (X) paste (x [1:3], collapse='-'))
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d", origin =" 2019-04-18")
Data$age <- dateID - dateID [which(Data$event == 'birth')]
head(Data)
beren2 <- Data
beren3 <- beren2 [order(beren2$age),]
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == 'bottle')
Feeds <- which(beren3$event == "bottle")
avgMilk <- mean(beren3$value[Feeds])
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)
varFeed <- tappy(beren3$value[Feeds], beren3$age[Feeds], var)
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds], beren3$age[Feeds])
