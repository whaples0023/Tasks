"%p%" <- function(){
'Hello' %p% 'student!'
}
"%p%" <- function(){
"Hello" %p% "student!"
}
"%p%" <- function(){
"Hello" %p% "student!"
}
submit()
skip()
"%p%" <- function(left, right){ 'I', 'love', 'R!'
paste(left, right)
}
paste("I", "love", "R!")
"%p%" <- function(left, right){
paste("I" %p% "love" %p% "R!")
}
skip()
data(cars)
help(cars)
Run head(cars)
head(cars)
plot(cars)
help(plot)
plot(x and y)
plot(x,y)
plot(x = car$speed, y = cars$dist)
skip()
plot(x = cars$dist, y = cars$speed)
skip()
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, xlab = "Speed", y = cars$dist, ylab = "Stopping Distance")
main(My Plot)
skip()
plot(cars, main = My Plot Subtitle)
plot(cars, submain = My Plot)
skip()
plot(cars, col = 2)
plot(cars, xlim = c(10, 15)
plot(cars, xlim = c(10, 15)
plot(cars, xlim = c(10, 15))
?points?
plot(cars, pch =2)
skip()
data(mtcars)
help(boxplot)
boxplot(mpg ~ cyl and data = mtcars)
skip()
hist(mtcars$mpg)
setwd('beren_new.csv')
Feeds <- which(beren3$event == 'bottle')
trueMean <- 5
trueSD1 <- 5
populaation1 <- rnorm(1 e6, trueMean1, trueSD1)
population1 <- rnorm(1 e6, trueMean1, trueSD1)
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, size)
Sample2 <- sample(population2, Size)
#
boxplot(Sample1, Sample2)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder ('grandpa_mom')
PatGrandma <- makeFounder ("grandma_da")
PatGrandpa <- makeFounder ("grandpa_da")
head(MatGrandma)
nrow(MatGrandma)
head(MatGrandpa)
nrow(MatGrandpa)
head(PatGrandma)
nrow(PatGrandma)
head(PatGrandpa)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
#
ToMom <- length (grep("mom", Focus))/ length(Focus)
#These numbers should be 25%
ToMomMom <- length (grep("grandma_mom", Focus))/ length (Focus)
ToMomDad <- length (grep("grandpa_mom", Focus))/ length (Focus)
#Focus is not related to each grandparent equally, which I was not expecting.
ToDadDad <- length (grep("grandma_da", Focus))/ length (Focus)
ToDadMom <- length (grep("grandma_mom", Focus))/ length (Focus)
#Focus is not equally related to any grandparent. I was not expecting this, I was expecting a 25% relation.
Sibling_01 <- makeBaby (Brenda, Alan)
#I expect the amount to be 50%
ToSib <- length (intersect(Focus, Sibling_01))/length(Focus)
ManySiblings <- replicate (1e3, length(intersect (Focus, makeBaby(Brenda, Alan))))/length (Focus))
ManySiblings <- replicate (1e3, length(intersect (Focus, makeBaby(Brenda, Alan)))/length (Focus))
quantile (ManySiblings)
mean(ManySiblings)
plot(denisty(ManySiblings), main="", xlab=" proportion shared genes")
plot(density(ManySiblings), main="", xlab=" proportion shared genes")
#This difference could be due to the possibility of them getting 50% from the parents but its not exactly the same genes they all inherit, so the percents of shared genes are different between them.
HWE <- function(p) {
aa <- p^2
ab <- 2 * p * (1-p)
bb <- (1-p)^2
return(c(aa=aa, ab=ab, bb=bb))
}
HWE(0.5)
plot(1,1, type="n", xlim=c (0,1), ylim=c(0,1), xlab="freq. allele a", ylab="geno. freq")
p <- seq(from = 0, to = 1, by = 0.01)
GenoFreq <- t(sappy(p,HWE))
GenoFreq <- t(sapply(p,HWE))
lines (p, GenoFreq[,"aa"], lwd=2, col="red")
#This graph shows that as the frequency of allele a increases then the genotype increases as well. When allele a frequency is low then so is the genotype frequnecy. Time and geogaphic space is not shown in the plot.
lines(p, GenoFreq[,"ab"], lwd=2, col="purple")
lines(p, GenoFreq[,"bb"], lwd=2, col="blue")
legend("top", legend=c("aa","ab","bb"), col=c("red", "purple", "blue"), lty = 1, lwd = 2, bty= "n")
Pop <- simPop(500)
points(Pop[,"freqa"],Pop[,"Genotypes.aa"]/500, pch=21, bg="red")
#No it doesn't match instead the ones from Hardy-Weinberg are cluster together towards the center of the predicted line.
Pop <- simPop(50)
points(Pop[,"freqa"],Pop[,"Genotypes.aa"]/50, pch= 22, bg="red")
points(Pop[,"freqa"],Pop[,"Genotypes.aa"]/50, pch= 22, bg="red")
#The points are now more spread out across the aa line. I think this because in a smaller population the frequency is more relevent because less individuals have the aa allele.
library(leanPopGen)
#The points are now more spread out across the aa line. I think this because in a smaller population the frequency is more relevent because less individuals have the aa allele.
library(learnPopGen)
out across the aa line. I think this because in a smaller population the frequency is more relevent because less individuals have the aa allele.
#install the learnPopGen package
#The points are now more spread out across the aa line. I think this because in a smaller population the frequency is more relevent because less individuals have the aa allele.
#install the learnPopGen package
library(learnPopGen)
#The points are now more spread out across the aa line. I think this because in a smaller population the frequency is more relevent because less individuals have the aa allele.
install.packages("learnPopGen")
library(learnPopGen)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
x<- genetic.drift(Ne=200, nrep=5, pause=0.01)
PopSizes < -5:50
PopSizes <- 5:50
Samples <- rep(PopSizes, 5)
tExt <- sapply(Samples, function(x) nrow(simPop(x, 500)))
Line <- lm(tExt ~ Samples)
summary(Line)
Line$coef
plot(Samples, tExt)
abline(Line)
Line2 <- lm(tExt ~ Samples + 0)
abline(Line2)
source("http://jonsmitchell.com/code/fxn05.R")
Pop1 <- simPop (Popsize = 50, nGenerations = 100, initial_p = 0.5, h = 1, s = 0)
plot (1: nrow(Pop1), Pop1[,1], ylim=c(0, 1), typr= "1", xlab ="generation", ylab = "allele freq.", lwd=2)
plot (1: nrow(Pop1), Pop1[,1], ylim=c(0, 1), type= "1", xlab ="generation", ylab = "allele freq.", lwd=2)
plot (1: nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = "1", xlab = "generation", ylab = "allele freq.", lwd=2)
plot (1: nrow(Pop1), Pop1[,1], ylim=c(0, 1), type = 1, xlab = "generation", ylab = "allele freq.", lwd=2)
plot (1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type="1", xlab="generation", ylab="allele freq.",lwd=2)
plot (1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), type=1, xlab="generation", ylab="allele freq.",lwd=2)
plot (1:nrow(Pop1), Pop1[,1], ylim=c(0, 1), xlab="generation", ylab="allele freq.",lwd=2)
lines(1: nrow(Popl), Popl[,2], lwd=2, col='red')
lines(1: nrow(Pop1), Popl[,2], lwd=2, col='red')
lines(1: nrow(Pop1), Pop1[,2], lwd=2, col='red')
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd=2, bty="n"
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd=2, bty="n"
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd=2, bty="n"
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd=2, bty="n")
legend("topleft", legend = c("a", "b"), col = c("black", "red"), lwd=2, bty="n")
plotFit(nruns = 10, n = 50, ngens = 100, init_p= 0.5, h=1, s=0)
Expectation <- c(10,10,10,10)
Observed <- c(15,15,5,5)
Chisq <- sum(((Expectation - Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
Observed <- c(40,40,40,40)
Chisq <- sum(((Expectation - Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
Observed <- c(10,10,10,10)
Chisq <- sum(((Expectation - Observed)^2)/Expectation)
barplot(rbind(Expectation, Observed), beside = T, main = bquote(chi^2 ~ "=" ~. (Chisq)), legend.text=c("expected", "observed"))
#When you set the observed to 10 while the expectation is also at ten them the x^2 is 0. When you said the observed at 40 the x^2 is 360. Therefore if expectations are the same number as observed them there isn't a difference in x^2.
results <-.csv("http://jonsmitchell.com/data/biol112labresults.csv"stringsAsFactors=F)
#When you set the observed to 10 while the expectation is also at ten them the x^2 is 0. When you said the observed at 40 the x^2 is 360. Therefore if expectations are the same number as observed them there isn't a difference in x^2.
results <-read.csv("http://jonsmitchell.com/data/biol112labresults.csv"stringsAsFactors=F)
#When you set the observed to 10 while the expectation is also at ten them the x^2 is 0. When you said the observed at 40 the x^2 is 360. Therefore if expectations are the same number as observed them there isn't a difference in x^2.
results <-read.csv("http://jonsmitchell.com/data/biol112labresults.csv",stringsAsFactors=F)
length(Data)
length(data)
rnrow (data)
nrow (data)
ncol(data)
colnames(data)
head(data)
counts <- results[,c("yellow", "red", "green", "blue", "black", "tan")]
backgrounds <- c("White", "Red", "Yellow", "Green", "Blue", "Black")
calcChi(counts[1,])
Chisqs <- apply(counts, 1, calcChi)
plotChis(counts)
plotChis(counts)
plotChis(counts)
plotChis(counts)
plotChis(counts)
#They aren't even when Chisqs high but more even when Chisqs is low. It shows that the lower the Chisqs the more similiarity between samples.
Avg <- mean(Chisqs)
backgroundAvgs <- tapply(Chisqs, results[,3], mean)
propSig <- length(which( Chisqs > 11.70) / length(Chisqs)
percSig <- round(100 * propSig)
propSig <- length( which( Chisqs > 11.70) / length(Chisqs)
propSig <- length( which( Chisqs > 11.70) / length(Chisqs))
propSig <- length( which( Chisqs > 11.70) / length(Chisqs))
percSig <- round(100 * propSig)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.)
par(las = 1, mar = c(4, 4, 1, 1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis=1)
hist (Chisqs, main="", xlab"chi-squared values", ylab="frequency")
hist (Chisqs, main="", xlab="chi-squared values", ylab="frequency")
par(las = 1, mar = c(4,4,4,1,1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
par(las = 1, mar = c(4,4,1,1), mgp = c(2, 0.5, 0), tck = -0.01, cex. axis=1)
par(las = 1, mar = c(4,4,1,1), mgp = c(2, 0.5, 0), tck = -0.01, cex.axis =1)
plot(1,1, xlim=c(0, 400), ylim=c(1, 8.5), xlab="", ylab="", type="n", yaxt="n")
axis(2, at= 1:length(backgrounds), labels = backgrounds)
axis(2, at= 1:length(backgrounds), labels = backgrounds)
mtext(side=1, expression(chi^2), cex=1.75, line=2.5)
counter <- 1
Data <- Chisqs[which(results [,3] == i)]
for( i in backgrounds) {
Data <- Chisqs[which(results [,3] == i)]
}
for( i in backgrounds) {
Data <- Chisqs[which(results [,3] == i)]
addHist (Y=counter, Dat=Data, Color= backgroundCol[counter])
counter <- counter + 1
}
backgroundCol <- c("white", "#d53e4f", "#fee08b", "abdda4", "#3288bd"), "black")
backgroundCol <- c("white", "#d53e4f", "#fee08b", "abdda4", "#3288bd", "black")
for( i in backgrounds) {
Data <- Chisqs[which(results [,3] == i)]
addHist (Y=counter, Dat=Data, Color= backgroundCol[counter])
counter <- counter + 1
}
backgroundCol <- c("white", "#d53e4f", "#fee08b", "#abdda4", "#3288bd", "black")
for( i in backgrounds) {
Data <- Chisqs[which(results [,3] == i)]
addHist (Y=counter, Dat=Data, Color= backgroundCol[counter])
counter <- counter + 1
}
abline( v= 11.70, lty=2, lwd = 2, col = 'black')
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(slide=2, at=7, line = 0, "simulated")
mtext(side=2, at=7, line = 0, "simulated")
abline(v = 11.70. lty=2, lwd=2)
mtext(side=2, at=7, line = 0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
abline( v= 11.70, lty=2, lwd = 2, col = 'black')
Simulation <- simDraws(10000)
addHist(Y=7, Dat=Simulation, Color="lightgray")
mtext(side=2, at=7, line = 0, "simulated")
abline(v = 11.70, lty=2, lwd=2)
Fit <- c(1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation2 <- simDraws(1e4, w=Fit)
addHist(Y=8, Dat=Simulation2, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 1, 1, 1, 1, 1)
names(Fit) <- 1:6
Simulation3 <- simDraws(1e4, w= Fit)
addHist (Y=8, Dat=Simulation3, Color=rgb (0,0,0,0.25))
Fit <- c(0.5, 0.6, 0.7, 1, 1, 1)
names(Fit) <- 1:6
Simulation4 <- simDraws(1e4, w= Fit)
addHist (Y=8, Dat=Simulation4, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.2, 0.3, 0.4, 0.5, 1)
names(Fit) <- 1:6
Simulation5 <- simDraws(1e4, w= Fit)
addHist(Y=8, Dat=Simulation5, Color=rgb(0,0,0,0.25))
Fit <- c(0.1, 0.1, 0.1, 0.1, 0.1, 1)
names(Fit) <- 1:6
Simulation6 <- simDraws(1e4, w=Fit)
addHist(Y=8, DatSimulation6, Color=rgb(0,0,0,0.25))
addHist(Y=8, Dat=Simulation6, Color=rgb(0,0,0,0.25))
mtext(slide=2, at=8, line=0, "sel. sim.")
mtext(side=2, at=8, line=0, "sel. sim.")
Simulation7 <- c(Simulation2, Simulation3, Simulation4, Simulation5, Simulation6)
addHist (Y=8, DatSimulation7, Color=rgb(o,o,1,0.25)
addHist (Y=8, DatSimulation7, Color=rgb(o,o,1,0.25))
addHist (Y=8, DatSimulation7, Color=rgb(o,o,1,0.25))
addHist (Y=8, Dat=Simulation7, Color=rgb(o,o,1,0.25))
addHist (Y=8, Dat=Simulation7, Color=rgb(0,0,1,0.25))
library(learnPopGen)
coalescent.plot(learnPopGen)
install.packages(learnPopGen)
library(learnPopGen)
library(learnPopGen)
library(learnPopGen)
library(learnPopGen)
coalescent.plot()
addHist (Y=8, Dat=Simulation7, Color=rgb(o,o,1,0.25))
rm(list=ls())
library(learnPopGen)
#install.packages(learnPopGen)
coalescent.plot()
library(learnPopGen)
#install.packages(learnPopGen)
coalescent.plot()
coalescent.plot(n=20,ngen=30,col.order="alternating")
object<-coalescent.plot()
print(object)
plot(object)
coalescent.plot(n=10,ngen=30,col.order="alternating")
coalescent.plot(n=40,ngen=30,col.order="alternating")
coalescent.plot(n=30,ngen=60,col.order="alternating")
object<-coalescent.plot()
coalescent.plot(n=30,ngen=10,col.order="alternating")
coalescent.plot(n=30,ngen=10,col.order="alternating")
ith eight alleles. You can modify that by changing the n to a lower number because that will lower the number of gene copies.
#It takes on average about the fourth or fifth generation.
#
#Fitness plays an important role because the more offspring an organism is having them the more likely ther alleles are being passed on.
#Yes, they are alive in generation 0.
#install.packages(coala)
h eight alleles. You can modify that by changing the n to a lower number because that will lower the number of gene copies.
#It takes on average about the fourth or fifth generation.
#
#Fitness plays an important role because the more offspring an organism is having them the more likely ther alleles are being passed on.
#Yes, they are alive in generation 0.
#install.packages(coala)
#instal.packages(phytools)
eight alleles. You can modify that by changing the n to a lower number because that will lower the number of gene copies.
#It takes on average about the fourth or fifth generation.
#
#Fitness plays an important role because the more offspring an organism is having them the more likely ther alleles are being passed on.
#Yes, they are alive in generation 0.
#install.packages(coala)
#install.packages(phytools)
#The simulation begins with eight alleles. You can modify that by changing the n to a lower number because that will lower the number of gene copies.
#It takes on average about the fourth or fifth generation.
#
#Fitness plays an important role because the more offspring an organism is having them the more likely ther alleles are being passed on.
#Yes, they are alive in generation 0.
#install.packages(coala)
#install.packages(phytools)
library(coala)
install.packages("coala")
library(coala)
#The simulation begins with eight alleles. You can modify that by changing the n to a lower number because that will lower the number of gene copies.
#It takes on average about the fourth or fifth generation.
#
#Fitness plays an important role because the more offspring an organism is having them the more likely ther alleles are being passed on.
#Yes, they are alive in generation 0.
#install.packages(coala)
#install.packages(phytools)
library("coala")
install.packages("Rtools")
install.packages("phytools")
install.packages("coala")
install.packages("coala")
install.packages("coala")
install.packages("Rtools")
install.packages("coala")
model <- coal _model(sample_size= 5, loci _number = 10, loci _length = 500, ploidy =2) +
feat _mutation (10)+
feat _recombination(10) +
sumstat_trees() +
sumstate_nucleotide_div()
model <- coal_model(sample_size= 5, loci_number = 10, loci_length = 500, ploidy =2) +
feat_mutation (10)+
feat_recombination(10) +
sumstat_trees() +
sumstate_nucleotide_div()
stats <- simulate(model, nsim =1)
#install.packages(coala)
install.packages("coala")
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x) x-x[1])
plot(1,1, type="n",xlim=c(1998, 2013), ylim=c(-0.25, 0.25) )
s <- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1]. x. col= rgb(0,0,0,0.01)))
s <- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1]. x, col= rgb(0,0,0,0.01)))
s <- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1], x, col= rgb(0,0,0,0.01)))
dYear <-c()
dAlleles <-c()
for (i in 3:ncol(overallFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
}
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 50, n = 100, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
source("http://jonsmitchell.com/code/reformatData07.R")
source("http://jonsmitchell.com/code/simFxn.R")
plot(1, 1, type="n", xlim=c(1998, 2013), ylim=c(0,1))
s <- apply(overallFreq, 2, function(x) lines(overallFreq[,1], x, col=rgb(0,0,0,0.01)))
rescaleFreq <- apply(overallFreq[,3:ncol(overallFreq)], 2, function(x) x-x[1])
#
plot(1,1, type="n",xlim=c(1998, 2013), ylim=c(-0.25, 0.25) )
s <- apply(rescaleFreq, 2, function(x) lines(overallFreq[,1], x, col= rgb(0,0,0,0.01)))
dYear <-c()
dAlleles <-c()
for (i in 3:ncol(overallFreq)) {
dYear <- c(dYear, overallFreq[,1])
Vec <- overallFreq[,i]
Init <- overallFreq[1,i]
dAlleles <- c(dAlleles, Vec - Init)
}
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 50, n = 100, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
addFit(nruns = 50, n = 80, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#This graph shows the frequncies over time but in color so it's easier to tell them apart. As time goes on the frequecnes change colors from red to indicate they're changing.
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 50, n = 80, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 50, n = 60, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 30, n = 60, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 60, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 60, ngens = 10, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 30, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 80, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 90, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 100, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 120, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 140, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 20, n = 130, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 130, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 120, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
addFit(nruns = 80, n = 115, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 115, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 122, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 130, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 135, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
addFit(nruns = 80, n = 135, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
smoothScatter(dYear, dAlleles, colramp=Pal, nbin=100)
smoothScatter(dYear, dAlleles, colramp = Pal, nbin=100, xlab="year", ylab="change in allele freq. since 1998")
addFit(nruns = 80, n = 125, ngens = 18, startT = 1997, simCol = "gray40", rescale = TRUE)
#
plot(alleleFreqs$d_freq, alleleFreqs$d_imm, xlim=c(-0.15, 0.15), xlab="overall freq. change", ylab="freq. change in subset")
points(alleleFreqs$d_freq, alleleFreqs$d_birth, col='blue')
points(alleleFreqs$d_freq, alleleFreqs$d_surv, col='red')
install.packages(paleodb.org)
install.packages(Paeobiology Database)
install.packages(PaeobiologyDatabase)
install.packages(fishbase)
install.packages(rfishbase)
install.packages"paleodb.org"
install.packages"fishbase"
install.packages(type="rfigshare")
setwd('C:\\Users\\Mallori\\OneDrive\\Desktop\\Evolution\\Tasks\\Project Folder')
fs_add_authors(article_id, authors, session = fs_get_auth(),
create_missing = TRUE, debug = FALSE)
fs_add_authors(article_id, authors, session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors <- (article_id, authors, session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors<- (article_id, authors, session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors<- ('article_id', 'authors', 'session' = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors(article_id, authors, session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors<-(article_id, authors, session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors<-(article_id authors session = fs_get_auth(),create_missing = TRUE, debug = FALSE)
fs_add_authors<-('article_id authors' 'session' = fs_get_auth(),create_missing = TRUE, debug = FALSE)
Data <- read.csv('https://figshare.com/articles/dataset/Compensatory_effect_of_egg_size_csv/14798352/1')
Data <- read.csv('https://figshare.com/articles/dataset/Compensatory_effect_of_egg_size_csv/14798352/1', stringsAsFactors = F)
Data <- read.csv('https://figshare.com/articles/dataset/Compensatory_effect_of_egg_size_csv/14798352/1')
